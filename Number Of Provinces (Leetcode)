// From now on, i'll be uploading the function based solution rather than uploading the entire code. I have already shown how to take a graph as an input and then traverse it with the eternity of the code and now i have shown how to convert and adjacency matrix into an adjacency list 
class Solution {
public:
    void dfs(vector<int> adj[], vector<int> &vis, int node){
        vis[node] = 1;
        for(auto it: adj[node]){
            if(!vis[it]){
                dfs(adj, vis, it);
            }
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        vector<int> ans;
        int n = isConnected.size();
        vector<int> vis(n, 0);

        vector<int> adj[n];
        for(int i = 0; i<n; ++i){
            for(int j = i+1; j<n; ++j){
                if(isConnected[i][j] == 1){
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        int a = 0;
        for(int i = 0; i<n; ++i){
            if(!vis[i]){
                vis[i] = 1;
                dfs(adj, vis, i);
                a++;
            }
        }
        return a;
    }
};
